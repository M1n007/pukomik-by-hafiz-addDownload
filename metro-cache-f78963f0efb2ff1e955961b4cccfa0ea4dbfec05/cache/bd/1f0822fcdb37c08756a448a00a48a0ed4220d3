__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.setNativeExceptionHandler = exports.getJSExceptionHandler = exports.setJSExceptionHandler = undefined;

  var _reactNative = _require(_dependencyMap[0], "react-native");

  var ReactNativeExceptionHandler = _reactNative.NativeModules.ReactNativeExceptionHandler;

  var noop = function noop() {};

  var setJSExceptionHandler = exports.setJSExceptionHandler = function setJSExceptionHandler() {
    var customHandler = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : noop;
    var allowedInDevMode = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

    if (typeof allowedInDevMode !== 'boolean' || typeof customHandler !== 'function') {
      console.log('setJSExceptionHandler is called with wrong argument types.. first argument should be callback function and second argument is optional should be a boolean');
      console.log('Not setting the JS handler .. please fix setJSExceptionHandler call');
      return;
    }

    var allowed = allowedInDevMode ? true : !__DEV__;

    if (allowed) {
      global.ErrorUtils.setGlobalHandler(customHandler);

      console.error = function (message, error) {
        return global.ErrorUtils.reportError(error);
      };
    } else {
      console.log('Skipping setJSExceptionHandler: Reason: In DEV mode and allowedInDevMode = false');
    }
  };

  var getJSExceptionHandler = exports.getJSExceptionHandler = function getJSExceptionHandler() {
    return global.ErrorUtils.getGlobalHandler();
  };

  var setNativeExceptionHandler = exports.setNativeExceptionHandler = function setNativeExceptionHandler() {
    var customErrorHandler = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : noop;
    var forceApplicationToQuit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

    if (typeof customErrorHandler !== 'function' || typeof forceApplicationToQuit !== 'boolean') {
      console.log('setNativeExceptionHandler is called with wrong argument types.. first argument should be callback function and second argument is optional should be a boolean');
      console.log('Not setting the native handler .. please fix setNativeExceptionHandler call');
      return;
    }

    if (_reactNative.Platform.OS === 'ios') {
      ReactNativeExceptionHandler.setHandlerforNativeException(customErrorHandler);
    } else {
      ReactNativeExceptionHandler.setHandlerforNativeException(forceApplicationToQuit, customErrorHandler);
    }
  };

  exports.default = {
    setJSExceptionHandler: setJSExceptionHandler,
    getJSExceptionHandler: getJSExceptionHandler,
    setNativeExceptionHandler: setNativeExceptionHandler
  };
});