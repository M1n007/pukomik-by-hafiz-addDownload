__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.createNavigationPropConstructor = exports.initializeListeners = exports.createDidUpdateCallback = exports.createReactNavigationReduxMiddleware = undefined;

  var _reactNavigation = _require(_dependencyMap[0], "react-navigation");

  var _invariant = _require(_dependencyMap[1], "invariant");

  var _invariant2 = _interopRequireDefault(_invariant);

  var _reducer = _require(_dependencyMap[2], "./reducer");

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  var reduxSubscribers = new Map();
  var EMPTY_SCREEN_PROPS = {};

  var getScreenProps = function getScreenProps() {
    return EMPTY_SCREEN_PROPS;
  };

  function createReactNavigationReduxMiddleware(key, navStateSelector) {
    reduxSubscribers.set(key, new Set());
    return function (store) {
      return function (next) {
        return function (action) {
          var oldState = store.getState();
          var result = next(action);
          var newState = store.getState();
          var subscribers = reduxSubscribers.get(key);
          (0, _invariant2.default)(subscribers, "subscribers set should exist for " + key);
          triggerAllSubscribers(key, subscribers, {
            type: 'action',
            action: action,
            state: navStateSelector(newState),
            lastState: navStateSelector(oldState)
          });
          return result;
        };
      };
    };
  }

  var delaySubscriberTriggerUntilReactReduxConnectTriggers = false;
  var delayedTriggers = new Map();

  function triggerAllSubscribers(key, subscribers, payload) {
    var trigger = function trigger() {
      return subscribers.forEach(function (subscriber) {
        return subscriber(payload);
      });
    };

    if (!delaySubscriberTriggerUntilReactReduxConnectTriggers) {
      trigger();
      return;
    }

    var existingTriggers = delayedTriggers.get(key);

    if (existingTriggers) {
      existingTriggers.push(trigger);
    } else {
      delayedTriggers.set(key, [trigger]);
    }
  }

  function triggerDelayedSubscribers(key) {
    var triggers = delayedTriggers.get(key);

    if (!triggers) {
      return;
    }

    delayedTriggers.delete(key);

    for (var _iterator = triggers, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"]();;) {
      var _ref;

      if (_isArray) {
        if (_i >= _iterator.length) break;
        _ref = _iterator[_i++];
      } else {
        _i = _iterator.next();
        if (_i.done) break;
        _ref = _i.value;
      }

      var trigger = _ref;
      trigger();
    }
  }

  function createDidUpdateCallback(key) {
    delaySubscriberTriggerUntilReactReduxConnectTriggers = true;
    return triggerDelayedSubscribers.bind(null, key);
  }

  function initializeListeners(key, state) {
    var subscribers = reduxSubscribers.get(key);
    (0, _invariant2.default)(subscribers, "Before calling `reduxifyNavigator`, please call " + "`createReactNavigationReduxMiddleware`, so that we know " + "when to trigger your listener.");
    triggerAllSubscribers(key, subscribers, {
      type: 'action',
      action: _reducer.initAction,
      state: state,
      lastState: null
    });

    if (delaySubscriberTriggerUntilReactReduxConnectTriggers) {
      triggerDelayedSubscribers(key);
    }
  }

  function createNavigationPropConstructor(key) {
    var actionSubscribers = reduxSubscribers.get(key);
    (0, _invariant2.default)(actionSubscribers, "Before calling `reduxifyNavigator`, please call " + "`createReactNavigationReduxMiddleware`, so that we know " + "when to trigger your listener.");
    return function (dispatch, state, router, getCurrentNavigation) {
      (0, _invariant2.default)(router, "App.router must be provided to createNavigationPropConstructor as of " + "react-navigation-redux-helpers@2.0.0. Learn more: " + "https://reactnavigation.org/docs/en/" + "redux-integration.html#breaking-changes-in-2.3");
      (0, _invariant2.default)(getCurrentNavigation, "getCurrentNavigation must be provided to createNavigationPropConstructor as of " + "react-navigation-redux-helpers@2.0.0. Learn more: " + "https://reactnavigation.org/docs/en/" + "redux-integration.html#breaking-changes-in-2.3");
      return (0, _reactNavigation.getNavigation)(router, state, dispatch, actionSubscribers, getScreenProps, getCurrentNavigation);
    };
  }

  exports.createReactNavigationReduxMiddleware = createReactNavigationReduxMiddleware;
  exports.createDidUpdateCallback = createDidUpdateCallback;
  exports.initializeListeners = initializeListeners;
  exports.createNavigationPropConstructor = createNavigationPropConstructor;
});